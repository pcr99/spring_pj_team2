<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	
	<!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 <== pom.xml에 먼저 추가해야 security가 뜬다. -->   
	<security:http pattern="/resources/**" security="none" />	
	<security:http pattern="/common/**" security="none" />
	<security:http auto-config="true" use-expressions="true" create-session="never">
		
		<!-- 관리자 권한 영역  -->
		<security:intercept-url pattern="/**.an" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/comment_insert.mv" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
		<!-- 권한에 상관없이 접속 가능 영역(guest도 접속 가능) -->
		<security:intercept-url pattern="/**.ui" access="permitAll"/>
	
		<!-- 로그인한 사용자 영역(customer + 관리자) : id가 pk이므로 hasRole을 주면 권한 1개밖에 부여못하므로, hasAnyRole을 이용해 여러개 권한부여가 가능 -->
		<security:intercept-url pattern="/**.bc" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
		
		<!-- 로그인폼 -->
		<!-- login.do => login_check.do => UserAuthenticationService => 성공/실패/거부 -->
		<!-- 5개 설정을 소스와 일치시켜야 한다. -->
		<security:form-login login-page="/login.ui"
				login-processing-url="/login_Action.ui"
				authentication-success-handler-ref="userLoginSuccessHandler"
				authentication-failure-handler-ref="userLoginFailurerHandler"
				username-parameter="userId" password-parameter="userPwd" />
				
		<security:session-management>
			<!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션-->
			<security:concurrency-control max-sessions="2" 
				expired-url="/login.ui"
				error-if-maximum-exceeded="true"
			/>
		</security:session-management>	
		
		<!-- 접근 권한이 없는 경우 작동 -->
		<security:access-denied-handler ref="userDeniedHandler"/>
	</security:http>
		
	<!-- 로그인 성공시 작동 -->
	<bean id="userLoginSuccessHandler" class="spring.mvc.spring_pj_team2.security.UserLoginSuccessHandler">
		<constructor-arg name="sqlSession" ref="sqlSession"/>   <!-- dataSource-config.xml의  sqlSession 참조 -->
	</bean>
	
	<!-- 로그인 실패시 작동 -->
	<bean id="userLoginFailurerHandler" class="spring.mvc.spring_pj_team2.security.UserLoginFailurerHandler">
		<constructor-arg name="sqlSession" ref="sqlSession"/>  <!-- dataSource-config.xml의  sqlSession 참조 -->
		<constructor-arg name="passwordEncoder" ref="bCryptPasswordEncoder" /> 
	</bean>
	
	<!-- 접근 권한이 없는 경우 작동 -->
	<bean id="userDeniedHandler" class="spring.mvc.spring_pj_team2.security.UserDeniedHandler" />
	
	<!-- 로그인 인증처리 클래스 : 비밀번호인증, 로그인 성공, 실패, 권한없음을 판단 -->
	<bean id="userAuthenticationService" class="spring.mvc.spring_pj_team2.security.UserAuthenticationService">
		<constructor-arg name="sqlSession" ref="sqlSession" /> 
	</bean>
	
	<!-- 비밀번호 암호화 클래스 -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
</beans>
